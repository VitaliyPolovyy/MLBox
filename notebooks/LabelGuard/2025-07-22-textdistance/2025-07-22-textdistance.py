import textdistance
import time
from typing import List, Dict, Tuple
import html

# ANSI –∫–æ–¥–∏ –¥–ª—è –∫–æ–ª—å–æ—Ä—ñ–≤ –≤ –∫–æ–Ω—Å–æ–ª—ñ
class Colors:
    COMMON = '\033[42m\033[30m'      # –ó–µ–ª–µ–Ω–∏–π —Ñ–æ–Ω, —á–æ—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç
    UNIQUE_1 = '\033[101m\033[37m'   # –ß–µ—Ä–≤–æ–Ω–∏–π —Ñ–æ–Ω, –±—ñ–ª–∏–π —Ç–µ–∫—Å—Ç  
    UNIQUE_2 = '\033[101m\033[37m'   # –°–∏–Ω—ñ–π —Ñ–æ–Ω, –±—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
    RESET = '\033[0m'                # –°–∫–∏–¥–∞–Ω–Ω—è
    BOLD = '\033[1m'
    HEADER = '\033[95m'

# –¢–µ—Å—Ç–æ–≤—ñ —Ç–µ–∫—Å—Ç–∏
text1 = """
·Éò·Éú·Éí·É†·Éî·Éì·Éò·Éî·Éú·É¢·Éî·Éë·Éò: ·É®·Éê·É•·Éê·É†·Éò, ·ÉÆ·Éù·É†·Éë·Éö·Éò·É° ·É§·É•·Éï·Éò·Éö·Éò, ·Éõ·É™·Éî·Éú·Éê·É†·Éî·É£·Éö·Éò ·É™·ÉÆ·Éò·Éõ·Éò (·Éê·É†·Éê·É∞·Éò·Éì·É†·Éù·Éí·Éî·Éú·Éò·É†·Éî·Éë·É£·Éö·Éò ·Éû·Éê·Éö·Éõ·Éò·É° ·Éñ·Éî·Éó·Éò, ·É°·É†·É£·Éö·Éê·Éì ·É∞·Éò·Éì·É†·Éù·Éí·Éî·Éú·Éò·É†·Éî·Éë·É£·Éö·Éò ·Éû·Éê·Éö·Éõ·Éò·É° ·Éí·É£·Éö·Éò·É° ·Éñ·Éî·Éó·Éò, ·Éê·É†·Éê·É∞·Éò·Éì·É†·Éù·Éí·Éî·Éú·Éò·É†·Éî·Éë·É£·Éö·Éò ·Éû·Éê·Éö·Éõ·Éò·É° ·Éí·É£·Éö·Éò·É° ·Éñ·Éî·Éó·Éò), ·ÉÆ·Éù·É†·Éë·Éö·Éò·É° ·É°·Éê·ÉÆ·Éê·Éõ·Éî·Éë·Éî·Éö·Éò, ·Éô·Éê·Éô·Éê·Éù·É° ·É§·ÉÆ·Éï·Éú·Éò·Éö·Éò ·É™·ÉÆ·Éò·Éõ·Éò·É° ·Éì·Éê·Éë·Éê·Éö·Éò ·É®·Éî·Éõ·É™·Éï·Éî·Éö·Éù·Éë·Éò·Éó 4%, ·Éô·Éï·Éî·É†·É™·ÉÆ·Éò·É° ·Éõ·Éî·Éö·Éê·Éú·Éü·Éò, ·É£·É™·ÉÆ·Éò·Éõ·Éù ·É†·É´·Éò·É° ·É§·ÉÆ·Éï·Éú·Éò·Éö·Éò, ·Éí·Éê·Éõ·Éê·É§·ÉÆ·Éï·Éò·Éî·É†·Éî·Éë·Éî·Éö·Éò ·Éô·Éù·Éõ·Éû·Éù·Éú·Éî·Éú·É¢·Éî·Éë·Éò (·Éê·Éõ·Éù·Éú·Éò·É£·Éõ·Éò·É° ·É∞·Éò·Éì·É†·Éù·Éô·Éê·É†·Éë·Éù·Éú·Éê·É¢·Éò, ·Éú·Éê·É¢·É†·Éò·É£·Éõ·Éò·É° ·Éì·Éò·É∞·Éò·Éì·É†·Éù·Éû·Éò·É†·Éù·É§·Éù·É°·É§·Éê·É¢·Éò, ·Éú·Éê·É¢·É†·Éò·É£·Éõ·Éò·É° ·É∞·Éò·Éì·É†·Éù·Éô·Éê·É†·Éë·Éù·Éú·Éê·É¢·Éò), ·Éõ·Éê·É†·Éò·Éö·Éò, ·Éî·Éõ·É£·Éö·Éí·Éê·É¢·Éù·É†·Éî·Éë·Éò ·Éö·Éî·É™·Éò·É¢·Éò·Éú·Éî·Éë·Éò (·É®·Éî·Éò·É™·Éê·Éï·É° ·É°·Éù·Éò·Éù·É°), ·Éê·É†·Éù·Éõ·Éê·É¢·Éò·Éñ·Éê·É¢·Éù·É†·Éò, ·Éõ·Éü·Éê·Éï·Éò·Éê·Éú·Éù·Éë·Éò·É° ·É†·Éî·Éí·É£·Éö·Éê·É¢·Éù·É†·Éò ·É†·É´·Éî·Éõ·Éü·Éê·Éï·Éê. ·Éô·Éê·Éô·Éê·Éù·É° ·É®·Éî·Éõ·É™·Éï·Éî·Éö·Éò ·Éõ·Éò·Éú·Éê·Éú·É•·É†·Éò·É° ·Éú·Éê·É¢·Éî·ÉÆ·Éî·Éë·Éò - 30%. ·É®·Éî·Éò·É´·Éö·Éî·Éë·Éê ·É®·Éî·Éò·É™·Éê·Éï·Éì·Éî·É° ·Éê·É†·Éê·É•·Éò·É°·É°, ·Éó·ÉÆ·Éò·Éö·É°, ·Éú·É£·É®·É°, ·É°·Éî·Éñ·Éê·Éõ·Éò·É° ·Éõ·Éê·É†·É™·Éï·Éö·Éî·Éë·É°.
* ·Éô·Éö·Éê·É°·Éò·Éô·É£·É†·Éò ·Éù·É†·É™·ÉÆ·Éù·Éë·Éò·Éö·Éê 
·Éô·Éï·Éî·Éë·Éò·Éó·Éò ·É¶·Éò·É†·Éî·Éë·É£·Éö·Éî·Éë·Éê 100 ·Éí·É†·Éê·Éõ ·Éû·É†·Éù·Éì·É£·É•·É¢·Éñ·Éî: ·Éî·Éú·Éî·É†·Éí·Éî·É¢·Éò·Éô·É£·Éö·Éò ·É¶·Éò·É†·Éî·Éë·É£·Éö·Éî·Éë·Éê ‚Äì 2097 ·Éô·Éò·Éö·Éù·ÉØ·Éù·É£·Éö·Éò (501 ·Éô·Éô·Éê·Éö); ·É™·ÉÆ·Éò·Éõ·Éò - 25.1 ·Éí·É†·Éê·Éõ·Éò; ·Éõ·Éê·Éó ·É®·Éù·É†·Éò·É° ·Éú·Éê·ÉØ·Éî·É†·Éò ·É™·ÉÆ·Éò·Éõ·Éù·Éï·Éê·Éú·Éò ·Éõ·Éü·Éê·Éï·Éî·Éë·Éò - 14.6 ·Éí·É†·Éê·Éõ·Éò; ·Éú·Éê·ÉÆ·É®·Éò·É†·É¨·Éß·Éö·Éî·Éë·Éò - 63.2 ·Éí·É†·Éê·Éõ·Éò; ·Éõ·Éê·Éó ·É®·Éù·É†·Éò·É° ·É®·Éê·É•·É†·Éî·Éë·Éò ‚Äì 36.5 ·Éí·É†·Éê·Éõ·Éò; ·É™·Éò·Éö·Éê - 4.3 ·Éí·É†·Éê·Éõ·Éò; ·Éõ·Éê·É†·Éò·Éö·Éò - 0.63 ·Éí·É†·Éê·Éõ·Éò.
·Éò·Éú·Éê·ÉÆ·Éî·Éë·Éê (18¬±5)¬∞–° ·É¢·Éî·Éõ·Éû·Éî·É†·Éê·É¢·É£·É†·Éò·É°·Éê ·Éì·Éê ·Éê·É†·Éê·É£·Éõ·Éî·É¢·Éî·É° 75% ·É∞·Éê·Éî·É†·Éò·É° ·É§·Éê·É†·Éì·Éù·Éë·Éò·Éó·Éò ·É¢·Éî·Éú·Éò·Éê·Éú·Éù·Éë·Éò·É° ·Éû·Éò·É†·Éù·Éë·Éî·Éë·É®·Éò.
"""
text2 = """
(GE) ·Éù·É†·É™·ÉÆ·Éù·Éë·Éò·Éö·Éê ¬´·Éö·Éù·Éï·Éò·É¢·Éê¬ª ·Éô·Éö·Éê·É°·Éò·Éô ·É•·É£·É•·Éò·É°¬ª ·É°·Éê·É†·Éô·Éê·Éö·Éê·É° ·Éú·Éê·É¢·Éî·ÉÆ·Éî·Éë·Éò·Éó. ·Éò·Éú·Éí·É†·Éî·Éì·Éò·Éî·Éú·É¢·Éî·Éë·Éò: ·É®·Éê·É•·Éê·É†·Éò, ·ÉÆ·Éù·É†·Éë·Éö·Éò·É° ·É§·É•·Éï·Éò·Éö·Éò, ·Éõ·É™·Éî·Éú·Éê·É†·Éî·É£·Éö·Éò ·É™·ÉÆ·Éò·Éõ·Éò (·Éê·É†·Éê·É∞·Éò·Éì·É†·Éù·Éí·Éî·Éú·Éò·É†·Éî·Éë·É£·Éö·Éò ·Éû·Éê·Éö·Éõ·Éò·É° ·Éñ·Éî·Éó·Éò, ·É°·É†·É£·Éö·Éê·Éì ·É∞·Éò·Éì·É†·Éù·Éí·Éî·Éú·Éò·É†·Éî·Éë·É£·Éö·Éò ·Éû·Éê·Éö·Éõ·Éò·É° ·Éí·É£·Éö·Éò·É° ·Éñ·Éî·Éó·Éò, ·Éê·É†·Éê·É∞·Éò·Éì·É†·Éù·Éí·Éî·Éú·Éò·É†·Éî·Éë·É£·Éö·Éò ·Éû·Éê·Éö·Éõ·Éò·É° ·Éí·É£·Éö·Éò·É° ·Éñ·Éî·Éó·Éò), ·ÉÆ·Éù·É†·Éë·Éö·Éò·É° ·É°·Éê·ÉÆ·Éê·Éõ·Éî·Éë·Éî·Éö·Éò, ·Éô·Éê·Éô·Éê·Éù·É° ·É§·ÉÆ·Éï·Éú·Éò·Éö·Éò ·É™·ÉÆ·Éò·Éõ·Éò·É° ·Éì·Éê·Éë·Éê·Éö·Éò ·É®·Éî·Éõ·É™·Éï·Éî·Éö·Éù·Éë·Éò·Éó 4%, ·Éô·Éï·Éî·É†·É™·ÉÆ·Éò·É° ·Éõ·Éî·Éö·Éê·Éú·Éü·Éò, ·É£·É™·ÉÆ·Éò·Éõ·Éù ·É†·É´·Éò·É° ·É§·ÉÆ·Éï·Éú·Éò·Éö·Éò, ·Éí·Éê·Éõ·Éê·É§·ÉÆ·Éï·Éò·Éî·É†·Éî·Éë·Éî·Éö·Éò ·Éô·Éù·Éõ·Éû·Éù·Éú·Éî·Éú·É¢·Éî·Éë·Éò (·Éê·Éõ·Éù·Éú·Éò·É£·Éõ·Éò·É° ·É∞·Éò·Éì·É†·Éù·Éô·Éê·É†·Éë·Éù·Éú·Éê·É¢·Éò, ·Éú·Éê·É¢·É†·Éò·É£·Éõ·Éò·É° ·Éì·Éò·É∞·Éò·Éì·É†·Éù·Éû·Éò·É†·Éù·É§·Éù·É°·É§·Éê·É¢·Éò, ·Éú·Éê·É¢·É†·Éò·É£·Éõ·Éò·É° ·É∞·Éò·Éì·É†·Éù·Éô·Éê·É†·Éë·Éù·Éú·Éê·É¢·Éò), ·Éõ·Éê·É†·Éò·Éö·Éò, ·Éî·Éõ·É£·Éö·Éí·Éê·É¢·Éù·É†·Éî·Éë·Éò ·Éö·Éî·É™·Éò·É¢·Éò·Éú·Éî·Éë·Éò (·É®·Éî·Éò·É™·Éê·Éï·É° ·É°·Éù·Éò·Éù·É°), ·Éê·É†·Éù·Éõ·Éê·É¢·Éò·Éñ·Éê·É¢·Éù·É†·Éò, ·Éõ·Éü·Éê·Éï·Éò·Éê·Éú·Éù·Éë·Éò·É° ·É†·Éî·Éí·É£·Éö·Éê·É¢·Éù·É†·Éò ·É†·É´·Éî·Éõ·Éü·Éê·Éï·Éê. ·Éô·Éê·Éô·Éê·Éù·É° ·É®·Éî·Éõ·É™·Éï·Éî·Éö·Éò ·Éõ·Éò·Éú·Éê·Éú·É•·É†·Éò·É° ·Éú·Éê·É¢·Éî·ÉÆ·Éî·Éë·Éò ‚Äì 30%. ·É®·Éî·Éò·É´·Éö·Éî·Éë·Éê ·É®·Éî·Éò·É™·Éê·Éï·Éì·Éî·É° ·Éê·É†·Éê·É•·Éò·É°·É°, ·Éó·ÉÆ·Éò·Éö·É°, ·Éú·É£·É®·É°, ·É°·Éî·Éñ·Éê·Éõ·Éò·É° ·Éõ·Éê·É†·É™·Éï·Éö·Éî·Éë·É°. ·Éò·Éú·Éê·ÉÆ·Éî·Éë·Éê (18¬±5)¬∞–° ·É¢·Éî·Éõ·Éû·Éî·É†·Éê·É¢·É£·É†·Éò·É°·Éê ·Éì·Éê ·Éê·É†·Éê·É£·Éõ·Éî·É¢·Éî·É° 75% ·É∞·Éê·Éî·É†·Éò·É° ·É§·Éê·É†·Éì·Éù·Éë·Éò·Éó·Éò ·É¢·Éî·Éú·Éò·Éê·Éú·Éù·Éë·Éò·É° ·Éû·Éò·É†·Éù·Éë·Éî·Éë·É®·Éò. ·Éù·É§·Éò·É™·Éò·Éê·Éö·É£·É†·Éò ·Éò·Éõ·Éû·Éù·É†·É¢·Éò·Éù·É†·Éò ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É®·Éò: ·É®·Éû·É° "·É†·Éù·É®·Éî·Éú ·ÉØ·Éù·É†·ÉØ·Éò·Éê" ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù, ·É•. ·Éó·Éë·Éò·Éö·Éò·É°·Éò, ·É°·Éê·Éõ·Éí·Éù·É†·Éò·É° ·É†·Éê·Éò·Éù·Éú·Éò, ·Éó·Éî·Éú·Éí·Éò·Éñ ·É©·Éê·Éú·É¢·Éö·Éê·É´·Éò·É° ·É•., N40/·Éì·Éò·Éì·Éò ·Éö·Éò·Éö·Éù, ·Éó·Éî·Éó·É†·Éò ·ÉÆ·Éî·Éï·Éò·É° ·Éì·Éê·É°·Éê·ÉÆ·Éö·Éî·Éë·Éê, ·É¢·Éî·Éö. +995 322 98 98 28. ·Éì·Éê·Éõ·Éñ·Éê·Éì·Éî·Éë·É£·Éö·Éò·Éê ·É£·Éô·É†·Éê·Éò·Éú·Éê·É®·Éò. 
"""

def find_all_common_fragments(text1: str, text2: str, min_length: int = 10, max_iterations: int = 20) -> List[Dict]:
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ —Å–ø—ñ–ª—å–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–µ–∫—Å—Ç–∞–º–∏"""
    results = []
    working_text1 = text1
    working_text2 = text2
    
    for iteration in range(max_iterations):
        print(f"üîÑ –Ü—Ç–µ—Ä–∞—Ü—ñ—è {iteration + 1}...", end=" ")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–¥–æ–≤—à–∏–π —Å–ø—ñ–ª—å–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
        common = textdistance.lcsstr(working_text1, working_text2)
        
        # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π - –∑—É–ø–∏–Ω—è—î–º–æ—Å—è
        if not common or len(common) < min_length:
            print("‚ùå –ë—ñ–ª—å—à–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            break
            
        # –ü–æ–∫–∞–∑—É—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (—Å–∫–æ—Ä–æ—á–µ–Ω–æ)
        preview = common[:50] + ("..." if len(common) > 50 else "")
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: '{preview}' ({len(common)} —Å–∏–º–≤.)")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—ó –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö
        pos1 = text1.find(common)
        pos2 = text2.find(common)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results.append({
            'text': common,
            'pos1': pos1,
            'pos2': pos2,
            'length': len(common),
            'iteration': iteration + 1
        })
        
        # –ó–∞–º—ñ–Ω—é—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –Ω–∞ —Ä—ñ–∑–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        placeholder1 = '‚óÜ' * len(common)
        placeholder2 = '‚óá' * len(common)
        
        working_text1 = working_text1.replace(common, placeholder1, 1)
        working_text2 = working_text2.replace(common, placeholder2, 1)
    
    print(f"\nüéØ –ó–∞–≥–∞–ª–æ–º –∑–Ω–∞–π–¥–µ–Ω–æ: {len(results)} —Å–ø—ñ–ª—å–Ω–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤")
    return sorted(results, key=lambda x: x['length'], reverse=True)

def create_markup_data(text1: str, text2: str, common_fragments: List[Dict]) -> Tuple[List, List]:
    """–°—Ç–≤–æ—Ä—é—î –¥–∞–Ω—ñ –¥–ª—è —Ä–æ–∑–º—ñ—Ç–∫–∏ —Ç–µ–∫—Å—Ç—ñ–≤ (—Å–ø—ñ–ª—å–Ω—ñ/—É–Ω—ñ–∫–∞–ª—å–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏)"""
    
    def mark_text(text: str, fragments: List[Dict], text_num: int) -> List[Dict]:
        """–†–æ–∑–º—ñ—á–∞—î –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ø—ñ–ª—å–Ω—ñ —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏"""
        marked = []
        last_pos = 0
        
        # –°–æ—Ä—Ç—É—î–º–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é
        sorted_fragments = sorted(
            [f for f in fragments if f[f'pos{text_num}'] != -1], 
            key=lambda x: x[f'pos{text_num}']
        )
        
        for fragment in sorted_fragments:
            pos = fragment[f'pos{text_num}']
            length = fragment['length']
            
            # –î–æ–¥–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É —á–∞—Å—Ç–∏–Ω—É –ø–µ—Ä–µ–¥ —Å–ø—ñ–ª—å–Ω–∏–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º
            if pos > last_pos:
                unique_text = text[last_pos:pos]
                if unique_text.strip():  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
                    marked.append({
                        'text': unique_text,
                        'type': f'unique_{text_num}',
                        'start': last_pos,
                        'end': pos
                    })
            
            # –î–æ–¥–∞—î–º–æ —Å–ø—ñ–ª—å–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
            marked.append({
                'text': fragment['text'],
                'type': 'common',
                'start': pos,
                'end': pos + length,
                'fragment_data': fragment
            })
            
            last_pos = pos + length
        
        # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —É–Ω—ñ–∫–∞–ª—å–Ω—É —á–∞—Å—Ç–∏–Ω—É
        if last_pos < len(text):
            unique_text = text[last_pos:]
            if unique_text.strip():
                marked.append({
                    'text': unique_text,
                    'type': f'unique_{text_num}',
                    'start': last_pos,
                    'end': len(text)
                })
        
        return marked
    
    markup1 = mark_text(text1, common_fragments, 1)
    markup2 = mark_text(text2, common_fragments, 2)
    
    return markup1, markup2

def visualize_console(text1: str, text2: str, common_fragments: List[Dict], max_line_length: int = 100):
    """–í—ñ–∑—É–∞–ª—ñ–∑—É—î —Ä—ñ–∑–Ω–∏—Ü—ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏"""
    
    print(f"\n{Colors.HEADER}{Colors.BOLD}" + "="*120)
    print("üé® –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø –†–Ü–ó–ù–ò–¶–¨ –ú–Ü–ñ –¢–ï–ö–°–¢–ê–ú–ò")
    print("="*120 + Colors.RESET)
    
    # –õ–µ–≥–µ–Ω–¥–∞
    print(f"\nüìã –õ–µ–≥–µ–Ω–¥–∞:")
    print(f"   {Colors.COMMON}–°–ü–Ü–õ–¨–ù–Ü –§–†–ê–ì–ú–ï–ù–¢–ò{Colors.RESET}")
    print(f"   {Colors.UNIQUE_1}–£–ù–Ü–ö–ê–õ–¨–ù–Ü –í –¢–ï–ö–°–¢–Ü 1{Colors.RESET}")
    print(f"   {Colors.UNIQUE_2}–£–ù–Ü–ö–ê–õ–¨–ù–Ü –í –¢–ï–ö–°–¢–Ü 2{Colors.RESET}")
    
    markup1, markup2 = create_markup_data(text1, text2, common_fragments)
    
    def print_marked_text(markup: List[Dict], title: str):
        print(f"\n{Colors.BOLD}{title}{Colors.RESET}")
        print("-" * len(title))
        
        current_line = ""
        
        for part in markup:
            # –í–∏–±–∏—Ä–∞—î–º–æ –∫–æ–ª—ñ—Ä
            if part['type'] == 'common':
                color = Colors.COMMON
            elif part['type'] == 'unique_1':
                color = Colors.UNIQUE_1
            else:  # unique_2
                color = Colors.UNIQUE_2
            
            text_part = part['text']
            
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä—è–¥–∫–∏, —è–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ
            words = text_part.split()
            for word in words:
                if len(current_line) + len(word) + 1 > max_line_length:
                    print(current_line)
                    current_line = ""
                
                if current_line:
                    current_line += " "
                current_line += f"{color}{word}{Colors.RESET}"
        
        if current_line:
            print(current_line)
    
    print_marked_text(markup1, "üìÑ –¢–ï–ö–°–¢ 1:")
    print_marked_text(markup2, "üìÑ –¢–ï–ö–°–¢ 2:")

def visualize_side_by_side(text1: str, text2: str, common_fragments: List[Dict], width: int = 60):
    """–í—ñ–∑—É–∞–ª—ñ–∑—É—î —Ç–µ–∫—Å—Ç–∏ –ø–æ—Ä—É—á –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"""
    
    print(f"\n{Colors.HEADER}{Colors.BOLD}" + "="*140)
    print("üë• –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –¢–ï–ö–°–¢–Ü–í SIDE-BY-SIDE")
    print("="*140 + Colors.RESET)
    
    markup1, markup2 = create_markup_data(text1, text2, common_fragments)
    
    def split_into_lines(markup: List[Dict], width: int) -> List[str]:
        """–†–æ–∑–±–∏–≤–∞—î —Ä–æ–∑–º—ñ—á–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—è–¥–∫–∏ –∑–∞–¥–∞–Ω–æ—ó —à–∏—Ä–∏–Ω–∏"""
        lines = []
        current_line = ""
        
        for part in markup:
            if part['type'] == 'common':
                color = Colors.COMMON
            elif part['type'] == 'unique_1':
                color = Colors.UNIQUE_1
            else:
                color = Colors.UNIQUE_2
            
            words = part['text'].split()
            for word in words:
                colored_word = f"{color}{word}{Colors.RESET}"
                # –†–∞—Ö—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –±–µ–∑ ANSI –∫–æ–¥—ñ–≤
                word_length = len(word)
                
                if len(current_line.replace(Colors.COMMON, '').replace(Colors.UNIQUE_1, '').replace(Colors.UNIQUE_2, '').replace(Colors.RESET, '')) + word_length + 1 > width:
                    lines.append(current_line)
                    current_line = colored_word
                else:
                    if current_line:
                        current_line += " "
                    current_line += colored_word
        
        if current_line:
            lines.append(current_line)
        
        return lines
    
    lines1 = split_into_lines(markup1, width)
    lines2 = split_into_lines(markup2, width)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    print(f"{Colors.BOLD}{'–¢–ï–ö–°–¢ 1':<{width}} ‚îÇ {'–¢–ï–ö–°–¢ 2':<{width}}{Colors.RESET}")
    print("‚îÄ" * width + "‚îº" + "‚îÄ" * width)
    
    # –í–∏–≤–æ–¥–∏–º–æ —Ä—è–¥–∫–∏
    max_lines = max(len(lines1), len(lines2))
    for i in range(max_lines):
        line1 = lines1[i] if i < len(lines1) else ""
        line2 = lines2[i] if i < len(lines2) else ""
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∞–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –±–µ–∑ ANSI –∫–æ–¥—ñ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
        clean_line1 = line1.replace(Colors.COMMON, '').replace(Colors.UNIQUE_1, '').replace(Colors.UNIQUE_2, '').replace(Colors.RESET, '')
        padding1 = width - len(clean_line1)
        
        print(f"{line1}{' ' * padding1} ‚îÇ {line2}")

def generate_html_report(text1: str, text2: str, common_fragments: List[Dict], filename: str = "text_comparison.html"):
    """–ì–µ–Ω–µ—Ä—É—î HTML –∑–≤—ñ—Ç –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤ –±—Ä–∞—É–∑–µ—Ä—ñ"""
    
    markup1, markup2 = create_markup_data(text1, text2, common_fragments)
    
    def markup_to_html(markup: List[Dict]) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Ä–æ–∑–º—ñ—Ç–∫—É –≤ HTML"""
        html_parts = []
        
        for part in markup:
            text = html.escape(part['text'])
            
            if part['type'] == 'common':
                html_parts.append(f'<span class="common" title="–°–ø—ñ–ª—å–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç">{text}</span>')
            elif part['type'] == 'unique_1':
                html_parts.append(f'<span class="unique1" title="–¢—ñ–ª—å–∫–∏ –≤ —Ç–µ–∫—Å—Ç—ñ 1">{text}</span>')
            else:  # unique_2
                html_parts.append(f'<span class="unique2" title="–¢—ñ–ª—å–∫–∏ –≤ —Ç–µ–∫—Å—Ç—ñ 2">{text}</span>')
        
        return ''.join(html_parts)
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="uk">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤</title>
        <style>
            body {{ 
                font-family: Arial, sans-serif; 
                margin: 20px; 
                background-color: #f5f5f5;
            }}
            .container {{ 
                max-width: 1200px; 
                margin: 0 auto; 
                background: white;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 0 10px rgba(0,0,0,0.1);
            }}
            .header {{ 
                text-align: center; 
                color: #333; 
                border-bottom: 2px solid #ddd;
                padding-bottom: 20px;
                margin-bottom: 30px;
            }}
            .legend {{ 
                background: #f8f9fa; 
                padding: 15px; 
                border-radius: 5px; 
                margin-bottom: 30px;
                border-left: 4px solid #007bff;
            }}
            .legend h3 {{ margin-top: 0; color: #007bff; }}
            .text-section {{ 
                margin-bottom: 40px; 
                border: 1px solid #ddd;
                border-radius: 5px;
            }}
            .text-header {{ 
                background: #007bff; 
                color: white; 
                padding: 15px; 
                font-weight: bold;
                border-radius: 5px 5px 0 0;
            }}
            .text-content {{ 
                padding: 20px; 
                line-height: 1.6; 
                font-size: 16px;
            }}
            .common {{ 
                background-color: #d4edda; 
                padding: 2px 4px; 
                border-radius: 3px;
                border: 1px solid #c3e6cb;
            }}
            .unique1 {{ 
                background-color: #f8d7da; 
                padding: 2px 4px; 
                border-radius: 3px;
                border: 1px solid #f5c6cb;
            }}
            .unique2 {{ 
                background-color: #cce7ff; 
                padding: 2px 4px; 
                border-radius: 3px;
                border: 1px solid #99d3ff;
            }}
            .stats {{ 
                background: #e9ecef; 
                padding: 15px; 
                border-radius: 5px;
                margin-bottom: 20px;
            }}
            .side-by-side {{
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
                margin-top: 30px;
            }}
            @media (max-width: 768px) {{
                .side-by-side {{
                    grid-template-columns: 1fr;
                }}
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤</h1>
                <p>–ê–Ω–∞–ª—ñ–∑ —Å–ø—ñ–ª—å–Ω–∏—Ö —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤</p>
            </div>
            
            <div class="legend">
                <h3>üìã –õ–µ–≥–µ–Ω–¥–∞</h3>
                <p>
                    <span class="common">–°–ø—ñ–ª—å–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏</span> - 
                    <span class="unique1">–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤ —Ç–µ–∫—Å—Ç—ñ 1</span> - 
                    <span class="unique2">–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤ —Ç–µ–∫—Å—Ç—ñ 2</span>
                </p>
            </div>
            
            <div class="stats">
                <strong>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong><br>
                –ó–Ω–∞–π–¥–µ–Ω–æ —Å–ø—ñ–ª—å–Ω–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤: {len(common_fragments)}<br>
                –ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Å–ø—ñ–ª—å–Ω–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤: {sum(f['length'] for f in common_fragments)} —Å–∏–º–≤–æ–ª—ñ–≤<br>
                –ü–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ–∫—Å—Ç—É 1: ~{(sum(f['length'] for f in common_fragments)/len(text1)*100):.1f}%<br>
                –ü–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ–∫—Å—Ç—É 2: ~{(sum(f['length'] for f in common_fragments)/len(text2)*100):.1f}%
            </div>
            
            <div class="side-by-side">
                <div class="text-section">
                    <div class="text-header">üìÑ –¢–µ–∫—Å—Ç 1</div>
                    <div class="text-content">{markup_to_html(markup1)}</div>
                </div>
                
                <div class="text-section">
                    <div class="text-header">üìÑ –¢–µ–∫—Å—Ç 2</div>
                    <div class="text-content">{markup_to_html(markup2)}</div>
                </div>
            </div>
        </div>
    </body>
    </html>
    """
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"‚úÖ HTML –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ñ–∞–π–ª: {filename}")
    return filename

def print_results(results: List[Dict], text1: str, text2: str):
    """–í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ"""
    
    print("\n" + "="*80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–û–®–£–ö–£ –°–ü–Ü–õ–¨–ù–ò–• –§–†–ê–ì–ú–ï–ù–¢–Ü–í")
    print("="*80)
    
    total_length = sum(r['length'] for r in results)
    print(f"üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤: {len(results)}")
    print(f"üìè –ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: {total_length} —Å–∏–º–≤–æ–ª—ñ–≤")
    print(f"üìà –ü–æ–∫—Ä–∏—Ç—Ç—è text1: ~{(total_length/len(text1)*100):.1f}%")
    print(f"üìà –ü–æ–∫—Ä–∏—Ç—Ç—è text2: ~{(total_length/len(text2)*100):.1f}%")
    print()
    
    for i, result in enumerate(results, 1):
        print(f"{i}. –§–†–ê–ì–ú–ï–ù–¢ ‚Ññ{i} (–¥–æ–≤–∂–∏–Ω–∞: {result['length']})")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        if len(result['text']) > 100:
            print(f"   üìù –¢–µ–∫—Å—Ç: '{result['text'][:50]}...{result['text'][-50:]}'")
        else:
            print(f"   üìù –¢–µ–∫—Å—Ç: '{result['text']}'")
        
        print(f"   üìç –ü–æ–∑–∏—Ü—ñ—ó: text1[{result['pos1']}], text2[{result['pos2']}]")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤—ñ–ª—å–Ω—ñ—Å—Ç—å
        if result['pos1'] != -1 and result['pos2'] != -1:
            check1 = text1[result['pos1']:result['pos1'] + result['length']]
            check2 = text2[result['pos2']:result['pos2'] + result['length']]
            is_correct = check1 == check2 == result['text']
            print(f"   ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: {'‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ' if is_correct else '‚úó –ü–æ–º–∏–ª–∫–∞!'}")
        else:
            print(f"   ‚ö†Ô∏è  –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –æ–¥–Ω–æ–º—É –∑ —Ç–µ–∫—Å—Ç—ñ–≤")
        
        print()

def find_and_visualize_differences(text1: str, text2: str, min_length: int = 10, max_iterations: int = 20, 
                                 console_vis: bool = True, side_by_side: bool = True, 
                                 html_report: bool = True, html_filename: str = "comparison.html"):
    """–ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø - –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –≤—Å—ñ –≤–∏–¥–∏ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
    
    print(f"{Colors.BOLD}üöÄ –ó–ê–ü–£–°–ö –ü–û–í–ù–û–ì–û –ê–ù–ê–õ–Ü–ó–£ –¢–ï–ö–°–¢–Ü–í{Colors.RESET}")
    
    # 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ø—ñ–ª—å–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏
    start_time = time.perf_counter()
    results = find_all_common_fragments(text1, text2, min_length, max_iterations)
    end_time = time.perf_counter()
    
    print(f"\n‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É: {end_time - start_time:.4f} —Å–µ–∫—É–Ω–¥")
    
    if html_report and results:
        generate_html_report(text1, text2, results, html_filename)
    
    return results

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
if __name__ == "__main__":
    print("üîç –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç—ñ–≤ –∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é v2.0\n")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
    results = find_and_visualize_differences(
        text1, text2, 
        min_length=15,
        console_vis=True,
        side_by_side=True, 
        html_report=True,
        html_filename="armenian_text_comparison.html"
    )
    
    print(f"\n{Colors.BOLD}‚ú® –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Å–ø—ñ–ª—å–Ω–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤{Colors.RESET}")